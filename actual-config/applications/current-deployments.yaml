apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "18"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"api-gateway","version":"v1"},"name":"api-gateway","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"api-gateway"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"api-gateway","version":"v1"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"app","operator":"In","values":["api-gateway"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":false,"containers":[{"env":[{"name":"PORT","value":"8080"},{"name":"ADMIN_PORT","value":"8081"},{"name":"NODE_ENV","value":"production"},{"name":"npm_config_cache","value":"/tmp/.npm"},{"name":"LOG_LEVEL","value":"info"},{"name":"KAFKA_BROKERS","value":"mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"},{"name":"KAFKA_SECURITY_PROTOCOL","value":"SASL_PLAINTEXT"},{"name":"KAFKA_SASL_MECHANISM","value":"SCRAM-SHA-512"},{"name":"KAFKA_SASL_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"kafka-credentials"}}},{"name":"KAFKA_SASL_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"kafka-credentials"}}},{"name":"MONGODB_URI","valueFrom":{"secretKeyRef":{"key":"mongodb-uri","name":"external-services"}}},{"name":"REDIS_URI","valueFrom":{"secretKeyRef":{"key":"redis-uri","name":"external-services"}}},{"name":"REDIS_URL","valueFrom":{"configMapKeyRef":{"key":"REDIS_URL","name":"microservices-config"}}},{"name":"REDIS_PASSWORD","valueFrom":{"configMapKeyRef":{"key":"REDIS_PASSWORD","name":"microservices-config"}}},{"name":"REDIS_USERNAME","valueFrom":{"configMapKeyRef":{"key":"REDIS_USERNAME","name":"microservices-config"}}},{"name":"MONGO_URI","valueFrom":{"configMapKeyRef":{"key":"MONGO_URI","name":"microservices-config"}}},{"name":"OPENAI_API_KEY","valueFrom":{"secretKeyRef":{"key":"openai-api-key","name":"api-keys"}}},{"name":"GOOGLE_PLACES_API_KEY","valueFrom":{"secretKeyRef":{"key":"google-places-api-key","name":"api-keys"}}},{"name":"GOOGLE_CLIENT_ID","valueFrom":{"secretKeyRef":{"key":"google-client-id","name":"api-keys"}}},{"name":"GOOGLE_CLIENT_SECRET","valueFrom":{"secretKeyRef":{"key":"google-client-secret","name":"api-keys"}}},{"name":"OPENWEATHER_API_KEY","valueFrom":{"secretKeyRef":{"key":"openweather-api-key","name":"api-keys"}}},{"name":"BETTER_AUTH_SECRET","valueFrom":{"secretKeyRef":{"key":"better-auth-secret","name":"api-keys"}}},{"name":"CLIENT_DEV_URL","valueFrom":{"configMapKeyRef":{"key":"CLIENT_DEV_URL","name":"microservices-config"}}},{"name":"CLIENT_PLANNER_URL","valueFrom":{"configMapKeyRef":{"key":"CLIENT_PLANNER_URL","name":"microservices-config"}}},{"name":"CLIENT_FRONT_URL","valueFrom":{"configMapKeyRef":{"key":"CLIENT_FRONT_URL","name":"microservices-config"}}}],"image":"ghcr.io/team-mercurious/api-gateway:latest","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/health","port":"http"},"initialDelaySeconds":30,"periodSeconds":10,"timeoutSeconds":5},"name":"api-gateway","ports":[{"containerPort":8080,"name":"http"},{"containerPort":8081,"name":"admin"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/ready","port":"http"},"initialDelaySeconds":5,"periodSeconds":5,"timeoutSeconds":3},"resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":false,"runAsNonRoot":false,"runAsUser":0},"volumeMounts":[{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/var/cache","name":"var-cache"},{"mountPath":"/app/dist","name":"app-dist"}]}],"securityContext":{"fsGroup":1000},"serviceAccountName":"api-gateway","volumes":[{"emptyDir":{},"name":"tmp"},{"emptyDir":{},"name":"var-cache"},{"emptyDir":{},"name":"app-dist"}]}}}}
    creationTimestamp: "2025-08-14T10:00:36Z"
    generation: 22
    labels:
      app: api-gateway
      version: v1
    name: api-gateway
    namespace: default
    resourceVersion: "179904"
    uid: db657f47-8e5f-4ccf-a2f7-499fb28b7ccf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: api-gateway
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-08-14T11:18:35Z"
          prometheus.io/path: /metrics
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: api-gateway
          version: v1
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - api-gateway
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: false
        containers:
        - args:
          - dist/main.js
          command:
          - node
          env:
          - name: RESEND_API_KEY
            valueFrom:
              secretKeyRef:
                key: resend-api-key
                name: resend-secret
          - name: EMAIL_FROM
            value: Travelyzer <onboarding@resend.dev>
          - name: PORT
            value: "8080"
          - name: ADMIN_PORT
            value: "8081"
          - name: NODE_ENV
            value: production
          - name: npm_config_cache
            value: /tmp/.npm
          - name: LOG_LEVEL
            value: info
          - name: KAFKA_BROKERS
            value: mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
          - name: KAFKA_SECURITY_PROTOCOL
            value: SASL_PLAINTEXT
          - name: KAFKA_SASL_MECHANISM
            value: SCRAM-SHA-512
          - name: KAFKA_SASL_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: kafka-credentials
          - name: KAFKA_SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: kafka-credentials
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                key: mongodb-uri
                name: external-services
          - name: REDIS_URI
            valueFrom:
              secretKeyRef:
                key: redis-uri
                name: external-services
          - name: REDIS_URL
            valueFrom:
              configMapKeyRef:
                key: REDIS_URL
                name: microservices-config
          - name: REDIS_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: REDIS_PASSWORD
                name: microservices-config
          - name: REDIS_USERNAME
            valueFrom:
              configMapKeyRef:
                key: REDIS_USERNAME
                name: microservices-config
          - name: MONGO_URI
            valueFrom:
              configMapKeyRef:
                key: MONGO_URI
                name: microservices-config
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                key: openai-api-key
                name: api-keys
          - name: GOOGLE_PLACES_API_KEY
            valueFrom:
              secretKeyRef:
                key: google-places-api-key
                name: api-keys
          - name: GOOGLE_CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: google-client-id
                name: api-keys
          - name: GOOGLE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: google-client-secret
                name: api-keys
          - name: OPENWEATHER_API_KEY
            valueFrom:
              secretKeyRef:
                key: openweather-api-key
                name: api-keys
          - name: BETTER_AUTH_SECRET
            valueFrom:
              secretKeyRef:
                key: better-auth-secret
                name: api-keys
          - name: CLIENT_DEV_URL
            valueFrom:
              configMapKeyRef:
                key: CLIENT_DEV_URL
                name: microservices-config
          - name: CLIENT_PLANNER_URL
            valueFrom:
              configMapKeyRef:
                key: CLIENT_PLANNER_URL
                name: microservices-config
          - name: CLIENT_FRONT_URL
            valueFrom:
              configMapKeyRef:
                key: CLIENT_FRONT_URL
                name: microservices-config
          image: ghcr.io/team-mercurious/api-gateway:latest
          imagePullPolicy: Always
          name: api-gateway
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8081
            name: admin
            protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /var/cache
            name: var-cache
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        serviceAccount: api-gateway
        serviceAccountName: api-gateway
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: var-cache
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-08-14T10:49:50Z"
      lastUpdateTime: "2025-08-14T11:18:37Z"
      message: ReplicaSet "api-gateway-5699c86b74" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-08-14T11:43:31Z"
      lastUpdateTime: "2025-08-14T11:43:31Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 22
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "6"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"api-generation","version":"v1"},"name":"api-generation","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"api-generation"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"api-generation","version":"v1"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"app","operator":"In","values":["api-generation"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":false,"containers":[{"env":[{"name":"PORT","value":"8080"},{"name":"LOG_LEVEL","value":"info"},{"name":"KAFKA_BROKERS","value":"mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"},{"name":"KAFKA_SECURITY_PROTOCOL","value":"SASL_PLAINTEXT"},{"name":"KAFKA_SASL_MECHANISM","value":"SCRAM-SHA-512"},{"name":"KAFKA_SASL_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"kafka-credentials"}}},{"name":"KAFKA_SASL_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"kafka-credentials"}}},{"name":"MONGODB_URI","valueFrom":{"secretKeyRef":{"key":"mongodb-uri","name":"external-services"}}},{"name":"MONGO_URI","valueFrom":{"configMapKeyRef":{"key":"MONGO_URI","name":"microservices-config"}}},{"name":"MONGO_URL","valueFrom":{"configMapKeyRef":{"key":"MONGO_URL","name":"microservices-config"}}},{"name":"DATABASE_URL","valueFrom":{"configMapKeyRef":{"key":"DATABASE_URL","name":"microservices-config"}}},{"name":"REDIS_URI","valueFrom":{"secretKeyRef":{"key":"redis-uri","name":"external-services"}}},{"name":"REDIS_URL","valueFrom":{"configMapKeyRef":{"key":"REDIS_URL","name":"microservices-config"}}},{"name":"REDIS_HOST","valueFrom":{"configMapKeyRef":{"key":"REDIS_HOST","name":"microservices-config"}}},{"name":"REDIS_PORT","valueFrom":{"configMapKeyRef":{"key":"REDIS_PORT","name":"microservices-config"}}},{"name":"REDIS_USERNAME","valueFrom":{"configMapKeyRef":{"key":"REDIS_USERNAME","name":"microservices-config"}}},{"name":"REDIS_PASSWORD","valueFrom":{"configMapKeyRef":{"key":"REDIS_PASSWORD","name":"microservices-config"}}},{"name":"OPENAI_API_KEY","valueFrom":{"secretKeyRef":{"key":"openai-api-key","name":"api-keys"}}},{"name":"GOOGLE_PLACES_API_KEY","valueFrom":{"secretKeyRef":{"key":"google-places-api-key","name":"api-keys"}}},{"name":"NODE_ENV","valueFrom":{"configMapKeyRef":{"key":"NODE_ENV","name":"microservices-config"}}}],"image":"ghcr.io/team-mercurious/api-generation:latest","livenessProbe":{"exec":{"command":["sh","-c","ps aux | grep '[n]ode' || exit 1"]},"failureThreshold":3,"initialDelaySeconds":60,"periodSeconds":30,"timeoutSeconds":5},"name":"api-generation","ports":[{"containerPort":8080,"name":"http"}],"readinessProbe":{"exec":{"command":["sh","-c","ps aux | grep '[n]ode' || exit 1"]},"failureThreshold":3,"initialDelaySeconds":30,"periodSeconds":10,"timeoutSeconds":3},"resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":[{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/var/cache","name":"var-cache"}]}],"imagePullSecrets":[{"name":"ghcr-pull-secret"}],"securityContext":{"fsGroup":1000},"serviceAccountName":"api-generation","volumes":[{"emptyDir":{},"name":"tmp"},{"emptyDir":{},"name":"var-cache"}]}}}}
    creationTimestamp: "2025-08-13T21:52:53Z"
    generation: 17
    labels:
      app: api-generation
      version: v1
    name: api-generation
    namespace: default
    resourceVersion: "180000"
    uid: ce1a337f-6c1f-485f-a3fe-842cb75cf8d3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: api-generation
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-08-14T11:18:35Z"
          prometheus.io/path: /metrics
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: api-generation
          version: v1
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - api-generation
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: false
        containers:
        - env:
          - name: PORT
            value: "8080"
          - name: LOG_LEVEL
            value: info
          - name: KAFKA_BROKERS
            value: mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
          - name: KAFKA_SECURITY_PROTOCOL
            value: SASL_PLAINTEXT
          - name: KAFKA_SASL_MECHANISM
            value: SCRAM-SHA-512
          - name: KAFKA_SASL_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: kafka-credentials
          - name: KAFKA_SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: kafka-credentials
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                key: mongodb-uri
                name: external-services
          - name: MONGO_URI
            valueFrom:
              configMapKeyRef:
                key: MONGO_URI
                name: microservices-config
          - name: MONGO_URL
            valueFrom:
              configMapKeyRef:
                key: MONGO_URL
                name: microservices-config
          - name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                key: DATABASE_URL
                name: microservices-config
          - name: REDIS_URI
            valueFrom:
              secretKeyRef:
                key: redis-uri
                name: external-services
          - name: REDIS_URL
            valueFrom:
              configMapKeyRef:
                key: REDIS_URL
                name: microservices-config
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: REDIS_HOST
                name: microservices-config
          - name: REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: REDIS_PORT
                name: microservices-config
          - name: REDIS_USERNAME
            valueFrom:
              configMapKeyRef:
                key: REDIS_USERNAME
                name: microservices-config
          - name: REDIS_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: REDIS_PASSWORD
                name: microservices-config
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                key: openai-api-key
                name: api-keys
          - name: GOOGLE_PLACES_API_KEY
            valueFrom:
              secretKeyRef:
                key: google-places-api-key
                name: api-keys
          - name: NODE_ENV
            valueFrom:
              configMapKeyRef:
                key: NODE_ENV
                name: microservices-config
          image: ghcr.io/team-mercurious/api-generation:latest
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - ps aux | grep '[n]ode' || exit 1
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: api-generation
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - ps aux | grep '[n]ode' || exit 1
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /var/cache
            name: var-cache
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ghcr-pull-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        serviceAccount: api-generation
        serviceAccountName: api-generation
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: var-cache
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-08-13T21:52:53Z"
      lastUpdateTime: "2025-08-14T11:19:15Z"
      message: ReplicaSet "api-generation-c5cf55cc6" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-08-14T11:44:00Z"
      lastUpdateTime: "2025-08-14T11:44:00Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 17
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "6"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"api-enrichment","version":"v1"},"name":"api-enrichment","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"api-enrichment"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"8080","prometheus.io/scrape":"true"},"labels":{"app":"api-enrichment","version":"v1"}},"spec":{"affinity":{"podAntiAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"podAffinityTerm":{"labelSelector":{"matchExpressions":[{"key":"app","operator":"In","values":["api-enrichment"]}]},"topologyKey":"kubernetes.io/hostname"},"weight":100}]}},"automountServiceAccountToken":false,"containers":[{"env":[{"name":"PORT","value":"8080"},{"name":"LOG_LEVEL","value":"info"},{"name":"KAFKA_BROKERS","value":"mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"},{"name":"KAFKA_SECURITY_PROTOCOL","value":"SASL_PLAINTEXT"},{"name":"KAFKA_SASL_MECHANISM","value":"SCRAM-SHA-512"},{"name":"KAFKA_SASL_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"kafka-credentials"}}},{"name":"KAFKA_SASL_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"kafka-credentials"}}},{"name":"MONGODB_URI","valueFrom":{"secretKeyRef":{"key":"mongodb-uri","name":"external-services"}}},{"name":"MONGO_URI","valueFrom":{"configMapKeyRef":{"key":"MONGO_URI","name":"microservices-config"}}},{"name":"MONGO_URL","valueFrom":{"configMapKeyRef":{"key":"MONGO_URL","name":"microservices-config"}}},{"name":"DATABASE_URL","valueFrom":{"configMapKeyRef":{"key":"DATABASE_URL","name":"microservices-config"}}},{"name":"REDIS_URI","valueFrom":{"secretKeyRef":{"key":"redis-uri","name":"external-services"}}},{"name":"REDIS_URL","valueFrom":{"configMapKeyRef":{"key":"REDIS_URL","name":"microservices-config"}}},{"name":"REDIS_HOST","valueFrom":{"configMapKeyRef":{"key":"REDIS_HOST","name":"microservices-config"}}},{"name":"REDIS_PORT","valueFrom":{"configMapKeyRef":{"key":"REDIS_PORT","name":"microservices-config"}}},{"name":"REDIS_USERNAME","valueFrom":{"configMapKeyRef":{"key":"REDIS_USERNAME","name":"microservices-config"}}},{"name":"REDIS_PASSWORD","valueFrom":{"configMapKeyRef":{"key":"REDIS_PASSWORD","name":"microservices-config"}}},{"name":"OPENAI_API_KEY","valueFrom":{"secretKeyRef":{"key":"openai-api-key","name":"api-keys"}}},{"name":"NODE_ENV","valueFrom":{"configMapKeyRef":{"key":"NODE_ENV","name":"microservices-config"}}}],"image":"ghcr.io/team-mercurious/api-enrichment:latest","livenessProbe":{"exec":{"command":["sh","-c","ps aux | grep '[n]ode' || exit 1"]},"failureThreshold":3,"initialDelaySeconds":60,"periodSeconds":30,"timeoutSeconds":5},"name":"api-enrichment","ports":[{"containerPort":8080,"name":"http"}],"readinessProbe":{"exec":{"command":["sh","-c","ps aux | grep '[n]ode' || exit 1"]},"failureThreshold":3,"initialDelaySeconds":30,"periodSeconds":10,"timeoutSeconds":3},"resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"100m","memory":"256Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":[{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/var/cache","name":"var-cache"}]}],"imagePullSecrets":[{"name":"ghcr-pull-secret"}],"securityContext":{"fsGroup":1000},"serviceAccountName":"api-enrichment","volumes":[{"emptyDir":{},"name":"tmp"},{"emptyDir":{},"name":"var-cache"}]}}}}
    creationTimestamp: "2025-08-13T21:53:02Z"
    generation: 17
    labels:
      app: api-enrichment
      version: v1
    name: api-enrichment
    namespace: default
    resourceVersion: "180001"
    uid: 261f21a1-5c99-478f-abfd-33c830768f00
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: api-enrichment
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2025-08-14T11:18:35Z"
          prometheus.io/path: /metrics
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: api-enrichment
          version: v1
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - api-enrichment
                topologyKey: kubernetes.io/hostname
              weight: 100
        automountServiceAccountToken: false
        containers:
        - env:
          - name: PORT
            value: "8080"
          - name: LOG_LEVEL
            value: info
          - name: KAFKA_BROKERS
            value: mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
          - name: KAFKA_SECURITY_PROTOCOL
            value: SASL_PLAINTEXT
          - name: KAFKA_SASL_MECHANISM
            value: SCRAM-SHA-512
          - name: KAFKA_SASL_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: kafka-credentials
          - name: KAFKA_SASL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: kafka-credentials
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                key: mongodb-uri
                name: external-services
          - name: MONGO_URI
            valueFrom:
              configMapKeyRef:
                key: MONGO_URI
                name: microservices-config
          - name: MONGO_URL
            valueFrom:
              configMapKeyRef:
                key: MONGO_URL
                name: microservices-config
          - name: DATABASE_URL
            valueFrom:
              configMapKeyRef:
                key: DATABASE_URL
                name: microservices-config
          - name: REDIS_URI
            valueFrom:
              secretKeyRef:
                key: redis-uri
                name: external-services
          - name: REDIS_URL
            valueFrom:
              configMapKeyRef:
                key: REDIS_URL
                name: microservices-config
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: REDIS_HOST
                name: microservices-config
          - name: REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: REDIS_PORT
                name: microservices-config
          - name: REDIS_USERNAME
            valueFrom:
              configMapKeyRef:
                key: REDIS_USERNAME
                name: microservices-config
          - name: REDIS_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: REDIS_PASSWORD
                name: microservices-config
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                key: openai-api-key
                name: api-keys
          - name: NODE_ENV
            valueFrom:
              configMapKeyRef:
                key: NODE_ENV
                name: microservices-config
          image: ghcr.io/team-mercurious/api-enrichment:latest
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - ps aux | grep '[n]ode' || exit 1
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: api-enrichment
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - ps aux | grep '[n]ode' || exit 1
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /var/cache
            name: var-cache
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: ghcr-pull-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        serviceAccount: api-enrichment
        serviceAccountName: api-enrichment
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: var-cache
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-08-13T21:53:02Z"
      lastUpdateTime: "2025-08-14T11:19:15Z"
      message: ReplicaSet "api-enrichment-5d86768457" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-08-14T11:44:00Z"
      lastUpdateTime: "2025-08-14T11:44:00Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 17
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
