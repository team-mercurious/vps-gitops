#!/bin/bash

# Script de d√©ploiement automatique simplifi√©
# Utilise directement les ImagePolicies de Flux pour d√©tecter les nouveaux SHA

LOG_FILE="/home/ubuntu/auto-deploy.log"
SERVICES=("api-gateway" "api-enrichment" "api-generation")

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fonction pour obtenir la derni√®re image compl√®te d√©tect√©e par Flux
get_flux_latest_image() {
    local service=$1
    kubectl get imagepolicies -n flux-system "$service" -o jsonpath='{.status.latestImage}' 2>/dev/null
}

# Fonction pour obtenir l'image actuellement d√©ploy√©e
get_current_image() {
    local service=$1
    kubectl get deployment "$service" -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null
}

# Fonction pour d√©ployer une nouvelle image
deploy_service() {
    local service=$1
    local new_image=$2
    
    log "üöÄ D√©ploiement de $service vers $new_image"
    
    # Mettre √† jour le d√©ploiement
    if kubectl set image "deployment/$service" "$service=$new_image"; then
        log "‚úÖ Image mise √† jour pour $service"
        
        # Attendre le d√©ploiement (timeout 5min)
        if kubectl rollout status "deployment/$service" --timeout=300s >/dev/null 2>&1; then
            log "‚úÖ D√©ploiement r√©ussi: $service"
            return 0
        else
            log "‚ùå Timeout ou √©chec du d√©ploiement: $service"
            return 1
        fi
    else
        log "‚ùå √âchec mise √† jour image: $service"
        return 1
    fi
}

# Fonction principale
main() {
    log "üöÄ D√©marrage auto-deploy"
    
    # Forcer la synchronisation Flux d'abord
    log "üîÑ Synchronisation Flux..."
    flux reconcile image repository api-gateway >/dev/null 2>&1 &
    flux reconcile image repository api-enrichment >/dev/null 2>&1 &  
    flux reconcile image repository api-generation >/dev/null 2>&1 &
    wait
    
    local updated=0
    
    for service in "${SERVICES[@]}"; do
        log "üîç V√©rification $service..."
        
        # Obtenir la derni√®re image compl√®te Flux
        local flux_image=$(get_flux_latest_image "$service")
        if [[ -z "$flux_image" ]]; then
            log "‚ö†Ô∏è  Pas d'image Flux pour $service"
            continue
        fi
        
        # Obtenir l'image actuelle
        local current_image=$(get_current_image "$service")
        if [[ -z "$current_image" ]]; then
            log "‚ö†Ô∏è  Service $service introuvable"
            continue
        fi
        
        log "üìä $service: actuel=$current_image"
        log "üìä $service: flux=$flux_image"
        
        # Si diff√©rent, d√©ployer
        if [[ "$current_image" != "$flux_image" ]]; then
            log "üÜï Mise √† jour d√©tect√©e pour $service"
            
            if deploy_service "$service" "$flux_image"; then
                updated=$((updated + 1))
                log "üéâ $service mis √† jour avec succ√®s"
            else
                log "üí• √âchec mise √† jour $service"
            fi
        else
            log "‚úÖ $service √† jour"
        fi
        
        sleep 1
    done
    
    if [[ $updated -gt 0 ]]; then
        log "üéØ Termin√©: $updated services mis √† jour"
        
        # V√©rifier la sant√© des services
        log "üè• V√©rification sant√© services..."
        sleep 10
        kubectl get pods -l "app in (api-gateway,api-enrichment,api-generation)" --no-headers | while read line; do
            echo "$line" | tee -a "$LOG_FILE"
        done
        
    else
        log "üí§ Aucune mise √† jour n√©cessaire"
    fi
}

# V√©rifications
if ! command -v kubectl >/dev/null 2>&1; then
    log "‚ùå kubectl manquant"
    exit 1
fi

if ! command -v flux >/dev/null 2>&1; then
    log "‚ö†Ô∏è  flux CLI manquant"
fi

# Ex√©cution
main