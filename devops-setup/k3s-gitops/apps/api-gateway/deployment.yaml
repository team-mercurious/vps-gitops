apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-gateway
        image: ghcr.io/team-mercurious/api-gateway:latest # {"$imagepolicy": "flux-system:api-gateway"}
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: admin
        env:
        - name: PORT
          value: "8080"
        - name: ADMIN_PORT
          value: "8081"
        - name: NODE_ENV
          value: "production"
        - name: npm_config_cache
          value: "/tmp/.npm"
        - name: LOG_LEVEL
          value: "info"
        # Kafka configuration
        - name: KAFKA_BROKERS
          value: "mercurious-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        - name: KAFKA_SECURITY_PROTOCOL
          value: "SASL_PLAINTEXT"
        - name: KAFKA_SASL_MECHANISM
          value: "SCRAM-SHA-512"
        - name: KAFKA_SASL_USERNAME
          valueFrom:
            secretKeyRef:
              name: kafka-credentials
              key: username
        - name: KAFKA_SASL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-credentials
              key: password
        # Database configuration (external services)
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: external-services
              key: mongodb-uri
        - name: REDIS_URI
          valueFrom:
            secretKeyRef:
              name: external-services
              key: redis-uri
        # Additional Redis configuration
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_URL
        - name: REDIS_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_PASSWORD
        - name: REDIS_USERNAME
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: REDIS_USERNAME
        # Additional MongoDB configuration
        - name: MONGO_URI
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: MONGO_URI
        # API Keys
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: openai-api-key
        - name: GOOGLE_PLACES_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: google-places-api-key
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: google-client-id
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: google-client-secret
        - name: OPENWEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: openweather-api-key
        - name: BETTER_AUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: better-auth-secret
        # Email service configuration
        - name: RESEND_API_KEY
          value: "re_PDMYR9ws_4fERzZ96ZAmyV5YN4L6UCE1M"
        - name: EMAIL_FROM
          value: "Travelyzer <onboarding@resend.dev>"
        # Client URLs
        - name: CLIENT_DEV_URL
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: CLIENT_DEV_URL
        - name: CLIENT_PLANNER_URL
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: CLIENT_PLANNER_URL
        - name: CLIENT_FRONT_URL
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: CLIENT_FRONT_URL
        # Health check endpoints
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: false
          runAsUser: 0
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        # Temporary volume for writable directories
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
        - name: app-dist
          mountPath: /app/dist
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: app-dist
        emptyDir: {}
      # Pod security and scheduling
      securityContext:
        fsGroup: 1000
      serviceAccountName: api-gateway
      automountServiceAccountToken: false
      # Anti-affinity to spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api-gateway
              topologyKey: kubernetes.io/hostname